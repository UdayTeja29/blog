const express = require('express');
const axios = require('axios');
const _ = require('lodash');

const app = express();
const port = 3000; // Replace with your desired port

// Middleware to fetch blog data from the third-party API
app.get('/api/blog-stats', async (req, res) => {
  try {
    const response = await axios.get('https://intent-kit-16.hasura.app/api/rest/blogs', {
      headers: {
        'x-hasura-admin-secret': '32qR4KmXOIpsGPQKMqEJHGJS27G5s7HdSKO3gdtQd2kv5e852SiYwWNfxkZOBuQ6',
      },
    });

    const blogData = response.data; // Assuming the API returns an array of blogs

    // Perform data analysis with Lodash
    const totalBlogs = blogData.length;
    const longestBlog = _.maxBy(blogData, 'title.length');
    const blogsWithPrivacy = _.filter(blogData, (blog) =>
      _.includes(_.toLower(blog.title), 'privacy')
    );
    const uniqueBlogTitles = _.uniqBy(blogData, 'title');

    // Respond with the statistics
    res.json({
      totalBlogs,
      longestBlog: longestBlog.title,
      blogsWithPrivacy: blogsWithPrivacy.length,
      uniqueBlogTitles: uniqueBlogTitles.map((blog) => blog.title),
    });
  } catch (error) {
    // Handle errors here, e.g., if the API request fails
    console.error(error);
    res.status(500).json({ error: 'An error occurred while fetching data.' });
  }
});

// Blog search endpoint
app.get('/api/blog-search', (req, res) => {
  const query = req.query.query.toLowerCase(); // Convert the query to lowercase

  // Perform a custom search on the fetched blog data
  const searchResults = blogData.filter((blog) =>
    _.toLower(blog.title).includes(query)
  );

  res.json({ results: searchResults });
});

// Start the Express server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
